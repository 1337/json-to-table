// Generated by CoffeeScript 1.4.0

/**
 * jsonTable.coffee v0.1
 *
 * 1337@github
 *
 * MIT
 *
 * Written in CoffeeScript because I want actual classes. Sue me.
*/


(function() {
  "use strict";

  var HTMLElement, TableBody, TableData, TableElement, TableHead, TableHeader, TableRow,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  HTMLElement = (function() {

    function HTMLElement() {
      this.toString = __bind(this.toString, this);

    }

    /**
     * Manipulatable, self-closing "element" object.
    */


    HTMLElement.prototype.contents = void 0;

    HTMLElement.prototype.toString = function() {
      return this.contents;
    };

    return HTMLElement;

  })();

  TableElement = (function(_super) {

    __extends(TableElement, _super);

    function TableElement() {
      return TableElement.__super__.constructor.apply(this, arguments);
    }

    TableElement.prototype.tagName = 'table';

    return TableElement;

  })(HTMLElement);

  TableHead = (function(_super) {

    __extends(TableHead, _super);

    function TableHead() {
      return TableHead.__super__.constructor.apply(this, arguments);
    }

    TableHead.prototype.tagName = 'thead';

    return TableHead;

  })(HTMLElement);

  TableBody = (function(_super) {

    __extends(TableBody, _super);

    function TableBody() {
      return TableBody.__super__.constructor.apply(this, arguments);
    }

    TableBody.prototype.tagName = 'thead';

    return TableBody;

  })(HTMLElement);

  TableData = (function(_super) {

    __extends(TableData, _super);

    function TableData() {
      return TableData.__super__.constructor.apply(this, arguments);
    }

    TableData.prototype.tagName = 'td';

    return TableData;

  })(HTMLElement);

  TableRow = (function(_super) {

    __extends(TableRow, _super);

    function TableRow() {
      return TableRow.__super__.constructor.apply(this, arguments);
    }

    TableRow.prototype.tagName = 'tr';

    TableRow.prototype.data = [];

    TableRow.prototype.add = function(tableData) {
      return this.data.push(tableData);
    };

    return TableRow;

  })(HTMLElement);

  TableHeader = (function(_super) {

    __extends(TableHeader, _super);

    function TableHeader() {
      return TableHeader.__super__.constructor.apply(this, arguments);
    }

    TableHeader.prototype.tagName = 'th';

    return TableHeader;

  })(TableData);

}).call(this);
