// Generated by CoffeeScript 1.4.0

/**
 * jsonTable.coffee v0.1
 *
 * 1337@github
 *
 * MIT
 *
 * Written in CoffeeScript because I want actual classes. Sue me.
*/


(function() {
  "use strict";

  var HTMLElement, TableBody, TableData, TableElement, TableHead, TableHeader, TableRow, unique, _base, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  HTMLElement = (function() {
    /**
     * Manipulatable, self-closing "element" object.
    */

    HTMLElement.prototype.tagName = 'div';

    HTMLElement.prototype.className = '';

    HTMLElement.prototype.style = '';

    HTMLElement.prototype.children = [];

    function HTMLElement(params) {
      var thing, _i, _len;
      if (params) {
        for (_i = 0, _len = params.length; _i < _len; _i++) {
          thing = params[_i];
          if (this.childElementClass) {
            this.add(new this.childElementClass(thing));
          } else {
            this.add(thing);
          }
        }
      }
    }

    HTMLElement.prototype.add = function(child) {
      return this.children.push(child);
    };

    HTMLElement.prototype.toString = function() {
      var child;
      return "<" + this.tagName + " class=\"" + this.className + "\" style=\"" + this.style + "\">\n  " + ((function() {
        var _i, _len, _ref, _results;
        _ref = this.children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          _results.push(child.toString());
        }
        return _results;
      }).call(this)) + "\n</" + this.tagName + ">";
    };

    return HTMLElement;

  })();

  TableElement = (function(_super) {

    __extends(TableElement, _super);

    function TableElement() {
      return TableElement.__super__.constructor.apply(this, arguments);
    }

    TableElement.prototype.tagName = 'table';

    TableElement.prototype.childElementClass = TableRow;

    return TableElement;

  })(HTMLElement);

  TableHead = (function(_super) {

    __extends(TableHead, _super);

    function TableHead() {
      return TableHead.__super__.constructor.apply(this, arguments);
    }

    TableHead.prototype.tagName = 'thead';

    TableHead.prototype.childElementClass = TableHeader;

    return TableHead;

  })(HTMLElement);

  TableBody = (function(_super) {

    __extends(TableBody, _super);

    function TableBody() {
      return TableBody.__super__.constructor.apply(this, arguments);
    }

    TableBody.prototype.tagName = 'tbody';

    TableBody.prototype.childElementClass = TableRow;

    return TableBody;

  })(HTMLElement);

  TableData = (function(_super) {

    __extends(TableData, _super);

    TableData.prototype.tagName = 'td';

    function TableData(children) {
      this.children = children;
      console.log("creating td");
    }

    return TableData;

  })(HTMLElement);

  TableRow = (function(_super) {

    __extends(TableRow, _super);

    TableRow.prototype.tagName = 'tr';

    TableRow.prototype.childElementClass = TableData;

    function TableRow(fields, isHeader) {
      var cell, cellObj;
      if (isHeader == null) {
        isHeader = false;
      }
      console.log("creating tr");
      for (cell in fields) {
        cellObj = null;
        if (isHeader) {
          cellObj = new TableHeader(cell);
        } else {
          cellObj = new TableData(cell);
        }
        this.add(cellObj);
      }
    }

    return TableRow;

  })(HTMLElement);

  TableHeader = (function(_super) {

    __extends(TableHeader, _super);

    function TableHeader() {
      return TableHeader.__super__.constructor.apply(this, arguments);
    }

    TableHeader.prototype.tagName = 'th';

    return TableHeader;

  })(TableData);

  unique = function(arr) {
    var a, i, u, _i, _ref, _ref1;
    _ref = [{}, []], u = _ref[0], a = _ref[1];
    for (i = _i = 0, _ref1 = arr.length; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
      if (u.hasOwnProperty(arr[i])) {
        continue;
      }
      a.push(arr[i]);
      u[arr[i]] = 1;
    }
    return a.slice(0, -1);
  };

  if ((_ref = window.ca) == null) {
    window.ca = {};
  }

  if ((_ref1 = (_base = window.ca).ohai) == null) {
    _base.ohai = {};
  }

  window.ca.ohai.jsonTable = function(json) {
    return new TableElement(json).toString();
  };

}).call(this);
